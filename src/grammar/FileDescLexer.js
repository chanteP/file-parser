// Generated from java-escape by ANTLR 4.11.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,31,243,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,
7,34,2,35,7,35,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,
7,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,3,10,97,8,10,1,11,1,11,5,11,101,8,11,
10,11,12,11,104,9,11,1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,14,5,14,114,8,
14,10,14,12,14,117,9,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,5,15,
128,8,15,10,15,12,15,131,9,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,
17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,20,1,20,
1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,
22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,
1,27,1,28,1,28,1,29,4,29,189,8,29,11,29,12,29,190,1,30,3,30,194,8,30,1,30,
1,30,4,30,198,8,30,11,30,12,30,199,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,
31,3,31,210,8,31,1,32,1,32,1,32,1,32,4,32,216,8,32,11,32,12,32,217,1,32,
1,32,1,33,4,33,223,8,33,11,33,12,33,224,1,33,1,33,4,33,229,8,33,11,33,12,
33,230,3,33,233,8,33,1,34,1,34,1,35,4,35,238,8,35,11,35,12,35,239,1,35,1,
35,1,115,0,36,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,0,21,0,23,0,25,
0,27,0,29,10,31,11,33,12,35,13,37,14,39,15,41,16,43,17,45,18,47,19,49,20,
51,21,53,22,55,23,57,24,59,25,61,26,63,27,65,28,67,29,69,30,71,31,1,0,5,
4,0,65,90,95,95,97,122,128,255,1,0,48,57,3,0,48,57,65,70,97,102,2,0,10,10,
13,13,2,0,9,9,32,32,251,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,
0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,29,1,0,
0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,
1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,
0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,
0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,1,73,1,0,0,0,3,
75,1,0,0,0,5,77,1,0,0,0,7,79,1,0,0,0,9,81,1,0,0,0,11,83,1,0,0,0,13,85,1,
0,0,0,15,87,1,0,0,0,17,90,1,0,0,0,19,92,1,0,0,0,21,96,1,0,0,0,23,98,1,0,
0,0,25,105,1,0,0,0,27,107,1,0,0,0,29,109,1,0,0,0,31,123,1,0,0,0,33,134,1,
0,0,0,35,137,1,0,0,0,37,142,1,0,0,0,39,148,1,0,0,0,41,153,1,0,0,0,43,162,
1,0,0,0,45,167,1,0,0,0,47,172,1,0,0,0,49,177,1,0,0,0,51,179,1,0,0,0,53,181,
1,0,0,0,55,183,1,0,0,0,57,185,1,0,0,0,59,188,1,0,0,0,61,197,1,0,0,0,63,209,
1,0,0,0,65,211,1,0,0,0,67,222,1,0,0,0,69,234,1,0,0,0,71,237,1,0,0,0,73,74,
5,40,0,0,74,2,1,0,0,0,75,76,5,41,0,0,76,4,1,0,0,0,77,78,5,124,0,0,78,6,1,
0,0,0,79,80,5,91,0,0,80,8,1,0,0,0,81,82,5,93,0,0,82,10,1,0,0,0,83,84,5,62,
0,0,84,12,1,0,0,0,85,86,5,60,0,0,86,14,1,0,0,0,87,88,5,36,0,0,88,89,5,123,
0,0,89,16,1,0,0,0,90,91,5,125,0,0,91,18,1,0,0,0,92,93,7,0,0,0,93,20,1,0,
0,0,94,97,3,19,9,0,95,97,3,25,12,0,96,94,1,0,0,0,96,95,1,0,0,0,97,22,1,0,
0,0,98,102,3,19,9,0,99,101,3,21,10,0,100,99,1,0,0,0,101,104,1,0,0,0,102,
100,1,0,0,0,102,103,1,0,0,0,103,24,1,0,0,0,104,102,1,0,0,0,105,106,7,1,0,
0,106,26,1,0,0,0,107,108,7,2,0,0,108,28,1,0,0,0,109,110,5,47,0,0,110,111,
5,42,0,0,111,115,1,0,0,0,112,114,9,0,0,0,113,112,1,0,0,0,114,117,1,0,0,0,
115,116,1,0,0,0,115,113,1,0,0,0,116,118,1,0,0,0,117,115,1,0,0,0,118,119,
5,42,0,0,119,120,5,47,0,0,120,121,1,0,0,0,121,122,6,14,0,0,122,30,1,0,0,
0,123,124,5,47,0,0,124,125,5,47,0,0,125,129,1,0,0,0,126,128,8,3,0,0,127,
126,1,0,0,0,128,131,1,0,0,0,129,127,1,0,0,0,129,130,1,0,0,0,130,132,1,0,
0,0,131,129,1,0,0,0,132,133,6,15,0,0,133,32,1,0,0,0,134,135,5,105,0,0,135,
136,5,102,0,0,136,34,1,0,0,0,137,138,5,108,0,0,138,139,5,111,0,0,139,140,
5,111,0,0,140,141,5,112,0,0,141,36,1,0,0,0,142,143,5,119,0,0,143,144,5,104,
0,0,144,145,5,105,0,0,145,146,5,108,0,0,146,147,5,101,0,0,147,38,1,0,0,0,
148,149,5,102,0,0,149,150,5,105,0,0,150,151,5,110,0,0,151,152,5,100,0,0,
152,40,1,0,0,0,153,154,5,98,0,0,154,155,5,97,0,0,155,156,5,99,0,0,156,157,
5,107,0,0,157,158,5,70,0,0,158,159,5,105,0,0,159,160,5,110,0,0,160,161,5,
100,0,0,161,42,1,0,0,0,162,163,5,98,0,0,163,164,5,97,0,0,164,165,5,99,0,
0,165,166,5,107,0,0,166,44,1,0,0,0,167,168,5,110,0,0,168,169,5,101,0,0,169,
170,5,120,0,0,170,171,5,116,0,0,171,46,1,0,0,0,172,173,5,103,0,0,173,174,
5,111,0,0,174,175,5,116,0,0,175,176,5,111,0,0,176,48,1,0,0,0,177,178,5,42,
0,0,178,50,1,0,0,0,179,180,5,47,0,0,180,52,1,0,0,0,181,182,5,43,0,0,182,
54,1,0,0,0,183,184,5,45,0,0,184,56,1,0,0,0,185,186,5,44,0,0,186,58,1,0,0,
0,187,189,5,35,0,0,188,187,1,0,0,0,189,190,1,0,0,0,190,188,1,0,0,0,190,191,
1,0,0,0,191,60,1,0,0,0,192,194,5,13,0,0,193,192,1,0,0,0,193,194,1,0,0,0,
194,195,1,0,0,0,195,198,5,10,0,0,196,198,5,13,0,0,197,193,1,0,0,0,197,196,
1,0,0,0,198,199,1,0,0,0,199,197,1,0,0,0,199,200,1,0,0,0,200,62,1,0,0,0,201,
202,5,34,0,0,202,203,3,21,10,0,203,204,5,34,0,0,204,210,1,0,0,0,205,206,
5,39,0,0,206,207,3,21,10,0,207,208,5,39,0,0,208,210,1,0,0,0,209,201,1,0,
0,0,209,205,1,0,0,0,210,64,1,0,0,0,211,215,5,91,0,0,212,213,3,27,13,0,213,
214,3,27,13,0,214,216,1,0,0,0,215,212,1,0,0,0,216,217,1,0,0,0,217,215,1,
0,0,0,217,218,1,0,0,0,218,219,1,0,0,0,219,220,5,93,0,0,220,66,1,0,0,0,221,
223,3,25,12,0,222,221,1,0,0,0,223,224,1,0,0,0,224,222,1,0,0,0,224,225,1,
0,0,0,225,232,1,0,0,0,226,228,5,46,0,0,227,229,3,25,12,0,228,227,1,0,0,0,
229,230,1,0,0,0,230,228,1,0,0,0,230,231,1,0,0,0,231,233,1,0,0,0,232,226,
1,0,0,0,232,233,1,0,0,0,233,68,1,0,0,0,234,235,3,23,11,0,235,70,1,0,0,0,
236,238,7,4,0,0,237,236,1,0,0,0,238,239,1,0,0,0,239,237,1,0,0,0,239,240,
1,0,0,0,240,241,1,0,0,0,241,242,6,35,1,0,242,72,1,0,0,0,15,0,96,102,115,
129,190,193,197,199,209,217,224,230,232,239,2,0,1,0,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class FileDescLexer extends antlr4.Lexer {

    static grammarFileName = "FileDesc.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'('", "')'", "'|'", "'['", "']'", "'>'", 
                         "'<'", "'${'", "'}'", null, null, "'if'", "'loop'", 
                         "'while'", "'find'", "'backFind'", "'back'", "'next'", 
                         "'goto'", "'*'", "'/'", "'+'", "'-'", "','" ];
	static symbolicNames = [ null, null, null, null, null, null, null, null, 
                          null, null, "BLOCK_COMMENT", "LINE_COMMENT", "IF", 
                          "LOOP", "WHILE", "FIND", "BACKFIND", "BACK", "NEXT", 
                          "GOTO", "ASTERISK", "SLASH", "PLUS", "MINUS", 
                          "PART_SPLIT", "GROUP_MARK", "NEWLINE", "DATA_STRING", 
                          "BYTE_VALUE", "NUMBER", "VAR", "WHITESPACE" ];
	static ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                      "T__7", "T__8", "LETTER", "ALL_LETTER", "ID", "DIGIT", 
                      "HEX", "BLOCK_COMMENT", "LINE_COMMENT", "IF", "LOOP", 
                      "WHILE", "FIND", "BACKFIND", "BACK", "NEXT", "GOTO", 
                      "ASTERISK", "SLASH", "PLUS", "MINUS", "PART_SPLIT", 
                      "GROUP_MARK", "NEWLINE", "DATA_STRING", "BYTE_VALUE", 
                      "NUMBER", "VAR", "WHITESPACE" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());
    }

    get atn() {
        return atn;
    }
}

FileDescLexer.EOF = antlr4.Token.EOF;
FileDescLexer.T__0 = 1;
FileDescLexer.T__1 = 2;
FileDescLexer.T__2 = 3;
FileDescLexer.T__3 = 4;
FileDescLexer.T__4 = 5;
FileDescLexer.T__5 = 6;
FileDescLexer.T__6 = 7;
FileDescLexer.T__7 = 8;
FileDescLexer.T__8 = 9;
FileDescLexer.BLOCK_COMMENT = 10;
FileDescLexer.LINE_COMMENT = 11;
FileDescLexer.IF = 12;
FileDescLexer.LOOP = 13;
FileDescLexer.WHILE = 14;
FileDescLexer.FIND = 15;
FileDescLexer.BACKFIND = 16;
FileDescLexer.BACK = 17;
FileDescLexer.NEXT = 18;
FileDescLexer.GOTO = 19;
FileDescLexer.ASTERISK = 20;
FileDescLexer.SLASH = 21;
FileDescLexer.PLUS = 22;
FileDescLexer.MINUS = 23;
FileDescLexer.PART_SPLIT = 24;
FileDescLexer.GROUP_MARK = 25;
FileDescLexer.NEWLINE = 26;
FileDescLexer.DATA_STRING = 27;
FileDescLexer.BYTE_VALUE = 28;
FileDescLexer.NUMBER = 29;
FileDescLexer.VAR = 30;
FileDescLexer.WHITESPACE = 31;



